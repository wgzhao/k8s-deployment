apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "prometheus-mysql-exporter.fullname" . }}
  labels:
    {{- include "prometheus-mysql-exporter.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "prometheus-mysql-exporter.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "prometheus-mysql-exporter.selectorLabels" . | nindent 8 }}
{{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | trim | indent 8 }}
{{- end }}
      annotations:
        checksum/credentials: {{ include (print .Template.BasePath "/secret-env.yaml") . | sha256sum }}
      {{- if .Values.cloudsqlproxy.enabled }}
        checksum/config: {{ include (print .Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- if .Values.annotations }}
{{ toYaml .Values.annotations | indent 8 }}
        {{- end }}
      {{- else }}
{{ toYaml .Values.annotations | indent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ template "prometheus-mysql-exporter.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if or .Values.config .Values.collectors }}
          args:
          {{- if .Values.config.logLevel }}
            - "--log.level={{ .Values.config.logLevel }}"
          {{- end}}
          {{- if .Values.config.logFormat }}
            - "--log.format={{ .Values.config.logFormat }}"
          {{- end}}
          {{- with .Values.collectors }}
          {{- range $index, $element := . }}
          {{- if and (typeIs "bool" $element) $element }}
            - "--collect.{{ $index }}"
          {{- else if and (typeIs "bool" $element) (not $element) }}
            - "--no-collect.{{ $index }}"
          {{- else }}
            - "--collect.{{ $index }}"
            - {{ $element | quote }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if not .Values.mysql.existingSecret }}
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
          {{- if .Values.mysql.existingPasswordSecret.name }}
                  name: {{ .Values.mysql.existingPasswordSecret.name }}
                  key: {{ .Values.mysql.existingPasswordSecret.key }}
          {{- else }}
                  name: {{ template "prometheus-mysql-exporter.fullname" . }}
                  key: password
          {{- end }}
          {{- end }}
          {{- if .Values.mysql.existingSecret }}
          envFrom:
            - secretRef:
                name: {{ template "prometheus-mysql-exporter.secret" . }}
          {{- else }}
            - name: DATA_SOURCE_NAME
              value: "{{ .Values.mysql.user }}:$(DB_PASSWORD)@{{ if .Values.mysql.protocol }}{{ .Values.mysql.protocol }}{{ end }}({{ .Values.mysql.host }}:{{ .Values.mysql.port }})/{{ if .Values.mysql.db }}{{ .Values.mysql.db }}{{ end }}{{ if .Values.mysql.param }}?{{ .Values.mysql.param }}{{ end }}"
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.internalPort }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.internalPort }}
          {{- with .Values.extraVolumeMounts }}
          volumeMounts: {{ toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.cloudsqlproxy.enabled }}
        - name: cloudsql-proxy
          image: "{{ .Values.cloudsqlproxy.image.repo }}:{{ .Values.cloudsqlproxy.image.tag }}"
          imagePullPolicy: "{{ .Values.cloudsqlproxy.image.PullPolicy  }}"
          command: ["/cloud_sql_proxy"
                    ,"-instances={{ .Values.cloudsqlproxy.instanceConnectionName }}=tcp:{{ .Values.cloudsqlproxy.port }}"
                    {{- if .Values.cloudsqlproxy.ipAddressTypes }}
                    ,"-ip_address_types={{ .Values.cloudsqlproxy.ipAddressTypes }}"
                    {{- end }}
                    {{- if not .Values.cloudsqlproxy.workloadIdentity.enabled }}
                    ,"-credential_file=/secrets/cloudsql/credentials.json"
                    {{- end }}
                    ]
          livenessProbe:
            exec:
              command: ["nc", "-z", "127.0.0.1", "3306"]
          {{- if not .Values.cloudsqlproxy.workloadIdentity.enabled }}
          volumeMounts:
            - name: cloudsql-proxy-sa-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
          {{- end }}
        {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
    {{- if and (.Values.cloudsqlproxy.enabled) (not .Values.cloudsqlproxy.workloadIdentity.enabled) }}
        - name: cloudsql-proxy-sa-credentials
          secret:
            secretName: {{ if .Values.cloudsqlproxy.credentialsSecret }}{{ .Values.cloudsqlproxy.credentialsSecret }}{{ else }}{{ template "prometheus-mysql-exporter.cloudsqlsecret" . }}{{ end }}
    {{- end }}
    {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
